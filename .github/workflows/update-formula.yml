name: Update Guts Formula on Release

on:
  workflow_dispatch:
  repository_dispatch:
    types: [new-release]

jobs:
  update:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout tap repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest release info
        id: release
        run: |
          # Get latest release and handle API errors
          if ! curl -s -f https://api.github.com/repos/Jeck0v/Guts/releases/latest > release.json; then
            echo "Failed to fetch release info"
            exit 1
          fi
          
          VERSION=$(jq -r .tag_name release.json)
          if [ "$VERSION" = "null" ]; then
            echo "No valid release found"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"

      - name: Check if version already exists
        id: check_version
        run: |
          CURRENT_VERSION=$(grep -o 'v[0-9]*\.[0-9]*\.[0-9]*' Formula/guts.rb || echo "none")
          NEW_VERSION=${{ steps.release.outputs.version }}
          
          if [ "$CURRENT_VERSION" = "$NEW_VERSION" ]; then
            echo "Version $NEW_VERSION already exists in formula"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Updating from $CURRENT_VERSION to $NEW_VERSION"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Download and verify source archive
        if: steps.check_version.outputs.skip == 'false'
        run: |
          VERSION=${{ steps.release.outputs.version }}
          URL="https://github.com/Jeck0v/Guts/archive/refs/tags/${VERSION}.tar.gz"
          
          # Download with retries
          for i in {1..3}; do
            if curl -L -f -o guts.tar.gz "$URL"; then
              break
            fi
            echo "Download attempt $i failed, retrying..."
            sleep 5
          done
          
          # Verify download
          if [ ! -f guts.tar.gz ] || [ ! -s guts.tar.gz ]; then
            echo "Download failed or file is empty"
            exit 1
          fi
          
          SHA256=$(shasum -a 256 guts.tar.gz | cut -d ' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "Downloaded and verified: $SHA256"

      - name: Update formula
        if: steps.check_version.outputs.skip == 'false'
        run: |
          # Use sed compatible with Ubuntu (GNU sed)
          sed -i "s|url \".*\"|url \"https://github.com/Jeck0v/Guts/archive/refs/tags/${version}.tar.gz\"|" Formula/guts.rb
          sed -i "s|sha256 \".*\"|sha256 \"${sha256}\"|" Formula/guts.rb
          
          # Verify changes
          echo "Updated formula:"
          grep -E "(url|sha256)" Formula/guts.rb

      - name: Commit & Push
        if: steps.check_version.outputs.skip == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet Formula/guts.rb; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add Formula/guts.rb
          git commit -m "Update Guts formula to $version

          - Updated URL to point to $version release
          - Updated SHA256 checksum
          - Auto-generated by GitHub Actions"
          
          git push
